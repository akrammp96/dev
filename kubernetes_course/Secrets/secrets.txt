_____What are secrets ?____

The ConfigMap stores configuration data
in plain text format.
So while it would be okay to move the hostname and username
into a ConfigMap,

it is definitely not the right place to store a password.
This is where Secrets come in.


___Create a secret___

__________Imperative
kubectl create secret generic app-secret --from-literal=DB_Host=mysql
                                        --from-literal=DB_Pass=123

or from file =====> check the configMap.

__________Declarative

with a yaml file

___Inject into a pod___


EnvFrom:
  - secretRef:
       name: app-config

single Env:

env:

- name: DB_Password

    valueFrom:

      secretKeyRef:

        name: app-secret

        key: DB_Password

======Secrets are not encrypted, only encoded
=> anyone can look up the secrets and decode them.

======Enabling secret data at rest: designed to 
prevent the attacker from accessing the 
unencrypted data by ensuring the data is encrypted when on disk

======Anyone able to create pods or deployments
in the same name space can access the Secrets as well.

#######  NOTE  #######
secrets encode data in base64 format. Anyone with the base64 encoded secret can easily decode it. As such the secrets can be considered as not very safe.

Secrets are not encrypted, so it is not safer in that sense. However, some best practices around using secrets make it safer. As in best practices like:

___Not checking-in secret object definition files to source code repositories.

___Enabling Encryption at Rest for Secrets so they are stored encrypted in ETCD. 





######## NOTE ######
the way kubernetes handles secrets. Such as:

A secret is only sent to a node if a pod on that node requires it.
Kubelet stores the secret into a tmpfs so that the secret is not written to disk storage.
Once the Pod that depends on the secret is deleted, kubelet will delete its local copy of the secret data as well.
